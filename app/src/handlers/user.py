import os
from typing import Union

from aiogram import Router, F, Bot
from aiogram.enums import ContentType
from aiogram.types import Message, CallbackQuery, InputMediaPhoto, FSInputFile, LabeledPrice, PreCheckoutQuery, \
    SuccessfulPayment
from aiogram.filters import CommandStart
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

from ..utils.keyboard_builder import (get_inline_buttons, get_products_pagination,
                                      get_delivery_options_keyboard, get_confirm_order)
from ..database.requests import (get_categories, get_products, get_product,
                                 add_to_cart, get_cart_product, delete_product_from_cart)


user = Router()

class UserChoose(StatesGroup):
    choose_category = State()
    products_data = State()
    page_product = State()


class PlaceAnOrder(StatesGroup):
    payment = State()
    delivery_method = State()
    waiting_for_address_option = State()
    enter_address = State()
    payment_method = State()
    order_confirmation = State()


@user.message(F.text == '–ù–∞–∑–∞–¥ ‚¨Ö')
@user.callback_query(F.data == 'to main')
@user.message(CommandStart())
async def start(event: Union[Message, CallbackQuery]):
    buttons = {"–ú–µ–Ω—é üìñ": 'menu', "–ö–æ—Ä–∑–∏–Ω–∞ üóë": 'cart', "–ù–∞—à–∏ –∞–¥—Ä–µ—Å–∞ üè™": 'my_address', "–û –Ω–∞—Å üìë": "about_us"}

    if isinstance(event, Message):
        await event.answer(
            f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, <b>{event.from_user.full_name}</b> üñê. \n'
            f'–Ø –±–æ—Ç –ø–∏—Ü—Ü–µ—Ä–∏–∏ "–ù–∞–∑–≤–∞–Ω–∏–µ", –±–ª–∞–≥–æ–¥–∞—Ä—è –º–Ω–µ –í—ã —Å–º–æ–∂–µ—Ç–µ —É–¥–æ–±–Ω–æ –∏ –±—ã—Å—Ç—Ä–æ –∑–∞–∫–∞–∑–∞—Ç—å –ø–∏—Ü—Ü—É!\n'
            "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –í–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç",
            reply_markup=await get_inline_buttons(btns=buttons)
        )
    else:
        await event.answer()
        await event.message.answer(
            f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, <b>{event.from_user.full_name}</b> üñê. \n'
            f'–Ø –±–æ—Ç –ø–∏—Ü—Ü–µ—Ä–∏–∏ "–ù–∞–∑–≤–∞–Ω–∏–µ", –±–ª–∞–≥–æ–¥–∞—Ä—è –º–Ω–µ –í—ã —Å–º–æ–∂–µ—Ç–µ —É–¥–æ–±–Ω–æ –∏ –±—ã—Å—Ç—Ä–æ –∑–∞–∫–∞–∑–∞—Ç—å –ø–∏—Ü—Ü—É!\n'
            "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –í–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç",
            reply_markup=await get_inline_buttons(btns=buttons)
        )



@user.callback_query(F.data == 'menu')
async def _(callback: CallbackQuery, state: FSMContext):
    categories = await get_categories()
    categories_buttons = {category.name: f'category_{category.id}' for category in categories}
    await state.set_state(UserChoose.choose_category)
    await callback.answer()
    await callback.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–∏—Ü—Ü",
        reply_markup=await get_inline_buttons(btns=categories_buttons)
    )


@user.callback_query(F.data == 'my_address')
async def _(callback: CallbackQuery):
    await callback.answer()
    await callback.message.answer('–ù–∞—à–∞ –ø–∏—Ü—Ü–µ—Ä–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø–æ –∞–¥—Ä–µ—Å—É <b>–ê–¥—Ä–µ—Å</b>\n\n'
                                  '–∏–ª–∏ –∂–µ..\n\n'
                                  '–°–µ—Ç—å –Ω–∞—à–µ–π –ø–∏—Ü—Ü–µ—Ä–∏–∏ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –ø–æ –∞–¥—Ä–µ—Å—É:\n'
                                  '<b>–ê–¥—Ä–µ—Å 1</b>\n'
                                  '<b>–ê–¥—Ä–µ—Å 2</b>\n'
                                  '<b>–ê–¥—Ä–µ—Å N..</b>',
                                  reply_markup=await get_inline_buttons(btns={"–ù–∞ –≥–ª–∞–≤–Ω—É—é üîô": 'to main'}),
                                  parse_mode='HTML')

@user.callback_query(F.data == 'about_us')
async def _(callback: CallbackQuery):
    await callback.answer()
    await callback.message.answer('<i>–¢—É—Ç –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–≤–µ–¥–µ–Ω–∏—è...</i>',
                                  reply_markup=await get_inline_buttons(btns={"–ù–∞ –≥–ª–∞–≤–Ω—É—é üîô": 'to main'}),
                                  parse_mode='HTML')



@user.callback_query(F.data.startswith('category_'))
async def _(callback: CallbackQuery, state: FSMContext, bot: Bot):
    data = callback.data.split('_')[1]

    await state.update_data(choose_category=data)

    products = await get_products(data)
    products_data = [(product.name, product.id, product.description, product.price, product.photo_path) for product in products]
    await state.update_data(products_data=products_data)

    data = await state.get_data()
    page = data.get("page_product", 0)

    if products_data:
        name, _, description, price, photo_path = products_data[page]
        if not os.path.exists(photo_path):
            await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è ‚ùó", show_alert=True)
            await state.clear()
            return
        try:
            await bot.send_photo(
                chat_id=callback.from_user.id,
                photo=FSInputFile(photo_path),
                caption=f"{name}\n{description}\n–¶–µ–Ω–∞: {price} —Ä—É–±.",
                reply_markup=await get_products_pagination(btns=products_data, page=0),
                parse_mode='HTML'
            )
            await callback.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–∏—Ü—Ü—É –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
            await callback.answer()
        except FileNotFoundError as e:
            await callback.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤—ã—à–ª–∞ –æ—à–∏–±–∫–∞: –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ ‚ùó", show_alert=True)
            await state.clear()
            raise e
        except Exception as e:
            await state.clear()
            raise e
    else:
        await callback.message.answer("–í –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ ‚ùó")
        await state.clear()
        await callback.answer()


@user.callback_query(F.data.startswith('product_'))
async def _(callback: CallbackQuery):
    data = callback.data.split('_')[1]
    await add_to_cart(callback.from_user.id, data)
    await callback.answer("–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É ‚úÖ")


@user.callback_query(F.data.startswith('page:'))
async def _(callback: CallbackQuery, state: FSMContext):
    page = int(callback.data.split(':')[1])
    data = await state.get_data()
    products_data = data.get("products_data", [])
    await state.update_data(page_product=page)

    if products_data:
        try:
            name, _, description, price, photo_path = products_data[page]
            await callback.message.edit_media(
                media=InputMediaPhoto(media=FSInputFile(photo_path), caption=f'{name}\n{description}\n–¶–µ–Ω–∞: {price} —Ä—É–±.',
                parse_mode = 'HTML'),
                reply_markup=await get_products_pagination(btns=products_data, page=page),
            )
            await callback.answer()
        except FileNotFoundError:
            await callback.message.answer(f"<i>–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤—ã—à–ª–∞ –æ—à–∏–±–∫–∞: –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</i> ‚ùó",
                                          parse_mode='HTML')
        except Exception as e:
            raise e
    else:
        await callback.answer()
        await callback.message.answer("<i>–ò–∑–≤–∏–Ω–∏—Ç–µ, –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–∞—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</i> ‚ùó",
                                      parse_mode='HTML',
                                      reply_markup=await get_inline_buttons(btns={"–ù–∞ –≥–ª–∞–≤–Ω—É—é üîô": 'to main'}))


@user.callback_query(F.data == 'cart')
async def display_cart(callback: CallbackQuery, state: FSMContext):
    await update_cart_message(callback, state)


async def update_cart_message(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    sum_of_payment = 0
    user_id = callback.from_user.id
    cart = await get_cart_product(user_id)

    if not cart:
        await callback.message.edit_text("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.",
                                         reply_markup=await get_inline_buttons(btns={"–ù–∞ –≥–ª–∞–≤–Ω—É—é üîô": 'to main'}))
        return

    text = "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n"
    for item in cart:
        product = await get_product(item.product_id)
        if product:
            product_name = product.name
            quantity = int(item.quantity)
            payment = product.price * quantity
            sum_of_payment += payment
            text += f'üçï–¢–æ–≤–∞—Ä: {product_name} - {quantity} —à—Ç. \nüí∞–°—É–º–º–∞ - {payment} —Ä—É–±.\n\n'

    await state.set_state(PlaceAnOrder.payment)
    await state.update_data(payment=sum_of_payment)
    text += f'üí≥–û–±—â–∞—è —Å—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {sum_of_payment} —Ä—É–±.'

    buttons = {'–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ üí∏': 'go to pay', '–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä ‚ùå': 'choose_delete', "–û—Ç–º–µ–Ω–∞ ‚ùå": 'to main'}
    await callback.message.edit_text(text, reply_markup=await get_inline_buttons(btns=buttons))



@user.callback_query(F.data == 'go to pay')
async def go_to_pay(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏...",
                                  reply_markup=await get_inline_buttons(
                                      btns={"–î–æ—Å—Ç–∞–≤–∫–∞ üõµ": 'delivery', "–°–∞–º–æ–≤—ã–≤–æ–∑ üö∂": 'pickup',
                                            "–û—Ç–º–µ–Ω–∞ ‚ùå": 'cancel_delete'}))
    await state.set_state(PlaceAnOrder.delivery_method)


@user.callback_query(PlaceAnOrder.delivery_method, F.data == 'cancel delete')
async def _(callback: CallbackQuery, state: FSMContext):
    await go_to_pay(callback, state)
    await callback.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. ‚úÖ")


@user.callback_query(F.data == 'choose_delete')
async def _(callback: CallbackQuery):
    user_id = callback.from_user.id
    cart = await get_cart_product(user_id)
    text = "üõí –í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:\n"
    keyboard = []
    for item in cart:
        product = await get_product(item.product_id)
        if product:
            product_name = product.name
            keyboard.append([f'‚ùå{product_name}', f'delete_product:{item.product_id}'])

    keyboard.append(["–û—Ç–º–µ–Ω–∞ ‚ùå", 'cancel_delete'])


    await callback.message.edit_text(text, reply_markup=await get_inline_buttons(btns=dict(keyboard)))
    await callback.answer()


@user.callback_query(F.data.startswith('delete_product:'))
async def delete_product(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    product_id = int(callback.data.split(':')[1])
    await delete_product_from_cart(user_id, product_id)
    await update_cart_message(callback, state)
    await callback.answer("–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω. ‚úÖ")


@user.callback_query(F.data == "cancel_delete")
async def cancel_delete(callback: CallbackQuery, state: FSMContext):
    await update_cart_message(callback, state)
    await callback.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. ‚úÖ")


@user.callback_query(PlaceAnOrder.delivery_method, F.data == 'delivery')
async def _(callback: CallbackQuery, state: FSMContext):
    await state.update_data(delivery_method=callback.data)
    await state.set_state(PlaceAnOrder.payment_method)
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã",
                         reply_markup=await get_inline_buttons(
                             btns={"–û–Ω–ª–∞–π–Ω –∫–∞—Ä—Ç–æ–π üí≥": 'online card', "–ù–∞–ª–∏—á–Ω—ã–º–∏ –∫—É—Ä—å–µ—Ä—É üí∞": 'cash to courier'}))


@user.callback_query(PlaceAnOrder.delivery_method, F.data == 'pickup')
async def _(callback: CallbackQuery, state: FSMContext):
    await state.update_data(delivery_method=callback.data)
    await state.set_state(PlaceAnOrder.payment_method)
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã",
                         reply_markup=await get_inline_buttons(
                             btns={"–û–Ω–ª–∞–π–Ω –∫–∞—Ä—Ç–æ–π üí≥": 'online card', "–ù–∞–ª–∏—á–Ω—ã–º–∏ –≤ –ø–∏—Ü—Ü–µ—Ä–∏–∏ üí∞": 'cash in pizzeria'}))


@user.callback_query(PlaceAnOrder.payment_method, F.data == 'online card')
async def _(callback: CallbackQuery, state: FSMContext):
    await state.update_data(payment_method=callback.data)
    data = await state.get_data()
    if data['delivery_method'] == 'delivery':
        await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± —É–∫–∞–∑–∞–Ω–∏—è –∞–¥—Ä–µ—Å–∞:",
                             reply_markup=get_delivery_options_keyboard())
        await state.set_state(PlaceAnOrder.waiting_for_address_option)  # –û–∂–∏–¥–∞–µ–º –≤—ã–±–æ—Ä–∞ –æ–ø—Ü–∏–∏ –∞–¥—Ä–µ—Å–∞
    else:  # data["delivery_method"] == "–°–∞–º–æ–≤—ã–≤–æ–∑"
        #–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø—Ä–æ—Å –∞–¥—Ä–µ—Å–∞ –∏ —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é –∑–∞–∫–∞–∑–∞
        await display_order_confirmation(callback, state)

@user.callback_query(PlaceAnOrder.payment_method, F.data.startswith('cash'))
async def _(callback: CallbackQuery, state: FSMContext):
    await state.update_data(payment_method=callback.data)
    data = await state.get_data()
    if data['delivery_method'] == 'delivery':
        await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± —É–∫–∞–∑–∞–Ω–∏—è –∞–¥—Ä–µ—Å–∞:",
                                         reply_markup=get_delivery_options_keyboard())
        await state.set_state(PlaceAnOrder.waiting_for_address_option)  # –û–∂–∏–¥–∞–µ–º –≤—ã–±–æ—Ä–∞ –æ–ø—Ü–∏–∏ –∞–¥—Ä–µ—Å–∞
    else:  # data["delivery_method"] == "–°–∞–º–æ–≤—ã–≤–æ–∑"
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø—Ä–æ—Å –∞–¥—Ä–µ—Å–∞ –∏ —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é –∑–∞–∫–∞–∑–∞
        await display_order_confirmation(callback, state)


@user.callback_query(PlaceAnOrder.waiting_for_address_option, F.data == 'enter address manually')
async def _(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏", reply_markup=None)
    await state.set_state(PlaceAnOrder.enter_address)


@user.callback_query(PlaceAnOrder.waiting_for_address_option, F.location, F.data == 'send location')
async def _(message: Message, state: FSMContext):
    latitude = message.location.latitude
    longitude = message.location.longitude
    await state.update_data(latitude=latitude, longitude=longitude)
    # TODO: Call geocoder to translate coordinate to address (optional)
    await display_order_confirmation(message, state)


@user.message(PlaceAnOrder.enter_address, F.text)
async def process_address(message: Message, state: FSMContext):
    await state.update_data(enter_address=message.text)

    # TODO: Validate Address format (optional)
    await display_order_confirmation(message, state)


async def display_order_confirmation(message: Message, state: FSMContext):
    data = await state.get_data()
    payment = data.get('payment', 'N/A')
    delivery = data.get('delivery_method', 'N/A')
    payment_method = data.get('payment_method', 'N/A')
    address = data.get("enter_address", 'N/A')

    if delivery == 'delivery': delivery = "–î–æ—Å—Ç–∞–≤–∫–∞ üõµ"
    else: delivery = '–°–∞–º–æ–≤—ã–≤–æ–∑ üö∂'

    if payment_method == 'online card': payment_method = '–û–Ω–ª–∞–π–Ω –∫–∞—Ä—Ç–æ–π üí≥'
    elif payment_method == 'cash to courier': payment_method = '–ù–∞–ª–∏—á–Ω—ã–º–∏ –∫—É—Ä—å–µ—Ä—É üí∞'
    else: payment_method = '–ù–∞–ª–∏—á–Ω—ã–º–∏ –≤ –ø–∏—Ü—Ü–µ—Ä–∏–∏ üí∞'

    # Handle cases where address is location (TODO)
    latitude = data.get("latitude", None)
    longitude = data.get("longitude", None)

    if latitude and longitude:
        address = f"–®–∏—Ä–æ—Ç–∞: {latitude}, –î–æ–ª–≥–æ—Ç–∞: {longitude}"

    await message.answer("–•–æ—Ä–æ—à–æ, <b>–¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã</b>, –¥–∞–≤–∞–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏–º –∏—Ö: \n\n"
                         f"–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {payment} —Ä—É–±.\n"
                         f"–°–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏: {delivery}\n"
                         f"–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: {payment_method}\n"
                         f"–ê–¥—Ä–µ—Å: {address}\n\n"
                         f"–ï—Å–ª–∏ –≤—Å—ë –ø—Ä–∞–≤–∏–ª—å–Ω–æ, <b>–ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–∫–∞–∑</b>",
                         parse_mode='HTML', reply_markup=get_confirm_order())


@user.callback_query(F.data == 'confirm order')
async def _(callback: CallbackQuery, bot: Bot, state: FSMContext):
    data = await state.get_data()
    await callback.answer("–û—Ç–ª–∏—á–Ω–æ, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ–ø–ª–∞—Ç–µ... üí∏")
    await bot.send_invoice(chat_id=callback.from_user.id,
                           title='–û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞ –≤ –ø–∏—Ü—Ü–µ—Ä–∏–∏',
                           description='–û–ø–ª–∞—Ç–∏—Ç–µ –∑–∞–∫–∞–∑',
                           provider_token=os.getenv('PAY_TOKEN'),
                           is_flexible=False,
                           currency='RUB',
                           prices=[LabeledPrice(label='–û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞', amount=int(data['payment']) * 100)],
                           start_parameter='pay_order',
                           payload=f'order_{callback.from_user.id}'
                           ) # 4242 4242 4242 4242

@user.pre_checkout_query()
async def _(pre_checkout_query: PreCheckoutQuery):
    await pre_checkout_query.answer(ok=True)


@user.message(F.content_type == ContentType.SUCCESSFUL_PAYMENT)
async def _(message: Message):
    payment_info = message.successful_payment
    await message.answer("–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ ‚úÖ\n–°—Ç–∞—Ç—É—Å —Å–≤–æ–µ–≥–æ –∑–∞–∫–∞–∑–∞ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.")

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–¥:
    # 1. –î–æ–±–∞–≤–∏—Ç—å –≤ –º–µ–Ω—é –∫–Ω–æ–ø–∫—É –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞
    # 2. –û—Ç—Å—ã–ª–∞—Ç—å –∑–∞–∫–∞–∑ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –≤ —á–∞—Ç
    # 3. –°–æ—Ö—Ä–∞–Ω—è—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ –ë–î.



@user.callback_query(F.data == 'cancel order')
async def _(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.answer("–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω ‚úÖ")
    await update_cart_message(callback, state)

