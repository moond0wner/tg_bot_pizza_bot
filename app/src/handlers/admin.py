import os
from typing import Union

from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery, FSInputFile
from aiogram.filters import Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext


from ..utils.keyboard_builder import get_inline_buttons
from ..database.requests import create_categorie, get_categories, change_categorie, delete_categorie
from ..database.requests import create_product, get_products, get_product, delete_product

from ..utils.admin_checker import AdminChecker


FOLDER = 'images'

admin = Router()
admin.message.filter(F.chat.type == 'private', AdminChecker())


class AddCategory(StatesGroup):
    name = State()

class ChangeCategory(StatesGroup):
    category_id = State()
    old_name = State()
    new_name = State()

class DeleteCategory(StatesGroup):
    category_name = State()

class DeleteProduct(StatesGroup):
    product_name = State()
    category_id = State()

class AddProduct(StatesGroup):
    name = State()
    description = State()
    price = State()
    category_id = State()
    photo = State()


# –°—Ç–∞—Ä—Ç
@admin.callback_query(F.data == 'to main admin')
@admin.message(Command('admin'))
async def start(event: Union[Message, CallbackQuery]):
    buttons = {"–ö–∞—Ç–µ–≥–æ—Ä–∏—è": "category", "–¢–æ–≤–∞—Ä": "product"}
    if isinstance(event, Message):
        await event.answer(
            f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä <b>{event.from_user.full_name}</b>, –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è.\n"
            f"<i>–ë—É–¥—å—Ç–µ –∞–∫–∫—É—Ä–∞—Ç–Ω—ã —Å –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏, –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –º–æ–∂–µ—Ç –ø–ª–æ—Ö–æ –æ—Ç—Ä–∞–∑–∏—Ç—å—Å—è –Ω–∞ —Ä–∞–±–æ—Ç–µ –ø–∏—Ü—Ü–µ—Ä–∏–∏.</i>",
            reply_markup=await get_inline_buttons(btns=buttons),
            parse_mode='HTML'
        )

    else:
        await event.answer()
        await event.message.answer(
            f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä <b>{event.from_user.full_name}</b>, –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è.\n"
            f"<i>–ë—É–¥—å—Ç–µ –∞–∫–∫—É—Ä–∞—Ç–Ω—ã —Å –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏, –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –º–æ–∂–µ—Ç –ø–ª–æ—Ö–æ –æ—Ç—Ä–∞–∑–∏—Ç—å—Å—è –Ω–∞ —Ä–∞–±–æ—Ç–µ –ø–∏—Ü—Ü–µ—Ä–∏–∏.</i>",
            reply_markup=await get_inline_buttons(btns=buttons),
            parse_mode='HTML'
        )



# –í—ã–±–æ—Ä –∏–∑–º–µ–Ω–µ–Ω–∏—è
@admin.callback_query(F.data == 'category')
async def _(callback: CallbackQuery):
    await callback.answer()
    await callback.message.edit_text("<b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ</b>",
                         reply_markup=await get_inline_buttons(
                             btns={"–°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π": 'list category',
                                   "–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é": 'new category',
                                   "–ò–∑–º–µ–Ω–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é": 'change category',
                                   "–£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é": 'delete category',
                                   "–û—Ç–º–µ–Ω–∞": 'to main admin'}),
                         parse_mode='HTML'
                                 )


@admin.callback_query(F.data == 'product')
async def _(callback: CallbackQuery):
    await callback.answer()
    await callback.message.edit_text("<b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ</b>",
                         reply_markup=await get_inline_buttons(
                             btns={"–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤": 'list product',
                                   "–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä": 'new product',
                                   "–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä": 'delete product'}),
                        parse_mode = 'HTML'
                                )


# –°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
@admin.callback_query(F.data == 'list category')
async def _(callback: CallbackQuery):
    categories = await get_categories()
    print(categories, type(categories))
    if categories:
        await callback.answer()
        result = '\n'.join(f'{index}. {category['name']}' for index, category in enumerate(categories, start=1))
        await callback.message.edit_text(f'–°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: <b>\n{result}</b>', parse_mode='HTML',
                                         reply_markup=await get_inline_buttons(btns={'–û—Ç–º–µ–Ω–∞': 'to main admin'}))
    else:
        await callback.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç ‚ùó")


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@admin.callback_query(F.data == 'new category')
async def _(callback: CallbackQuery, state: FSMContext):
    await state.set_state(AddCategory.name)
    await callback.answer()
    await callback.message.answer("<i>–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏...</i>", parse_mode='HTML')


@admin.message(AddCategory.name, F.text)
async def _(message: Message, state: FSMContext):
    try:
        await create_categorie(message.text)
        await message.answer(f'–ö–∞—Ç–µ–≥–æ—Ä–∏—è <b>"{message.text}"</b> –¥–æ–±–∞–≤–ª–µ–Ω–∞ üëå', parse_mode='HTML')
        await state.clear()
    except Exception as e:
        await message.answer(f"<i>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}</i>", parse_mode='HTML')
        raise e



# –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@admin.callback_query(F.data == 'change category')
async def _(callback: CallbackQuery, state: FSMContext):
    categories = await get_categories()
    if categories:
        await callback.answer()
        categories_buttons = {category["name"]: f'change_category_{category["id"]}' for category in categories}
        await state.set_state(ChangeCategory.category_id)
        await callback.message.answer("<b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å</b>",
                             reply_markup=await get_inline_buttons(btns=categories_buttons),
                             parse_mode='HTML')
    else:
        await callback.answer("–°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –¥–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é ‚ùó")


@admin.callback_query(ChangeCategory.category_id, F.data.startswith('change_category_'))
async def _(callback: CallbackQuery, state: FSMContext):
    category_id = callback.data.split('_')[-1]
    await state.update_data(category_id=category_id)
    await callback.answer()
    await state.set_state(ChangeCategory.new_name)
    await callback.message.edit_text("<i>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏...</i>", parse_mode='HTML')


@admin.message(ChangeCategory.new_name)
async def _(message: Message, state: FSMContext):
    await state.update_data(new_name=message.text)
    data = await state.get_data()
    try:
        await change_categorie(data['category_id'], data['new_name'])
        await message.answer("<b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞</b> üëå", parse_mode='HTML',
                             reply_markup=await get_inline_buttons(btns={"–û—Ç–º–µ–Ω–∞": 'to main admin'}))
        await state.clear()
    except Exception as e:
        await message.answer("<i>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ —Ö–æ–¥–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</i>", parse_mode='HTML',
                                reply_markup=await get_inline_buttons(btns={'–û—Ç–º–µ–Ω–∞': 'to main admin'}))
        await state.clear()
        raise e


# –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@admin.callback_query(F.data == 'delete category')
async def _(callback: CallbackQuery):
    categories = await get_categories()
    if categories:
        await callback.answer()
        categories_buttons = {category['name']: f'delete_category_{category['id']}' for category in categories}
        await callback.message.answer("<b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å</b>",
                             reply_markup=await get_inline_buttons(btns=categories_buttons),
                             parse_mode='HTML')
    else:
        await callback.answer("<i>–°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –¥–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é</i>", parse_mode='HTML')


@admin.callback_query(F.data.startswith('delete_category_'))
async def _(callback: CallbackQuery):
    data = callback.data.split('_')[-1]
    await callback.answer()
    try:
        await delete_categorie(data)
        await callback.message.edit_text("<b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞</b> üëå", parse_mode='HTML',
                                         reply_markup=await get_inline_buttons(btns={'–ù–∞ –≥–ª–∞–≤–Ω—É—é': 'to main admin'}))
    except Exception as e:
        await callback.message.edit_text("<i>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ —Ö–æ–¥–µ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏...</i>", parse_mode='HTML',
                                         reply_markup=await get_inline_buttons(btns={'–ù–∞ –≥–ª–∞–≤–Ω—É—é': 'to main admin'}))
        raise e


# –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
@admin.callback_query(F.data == 'list product')
async def _(callback: CallbackQuery):
    categories = await get_categories()
    if categories:
        await callback.answer()
        categories_buttons = {category['name']: f'items_category_{category['id']}' for category in categories}
        await callback.message.answer(
            "<b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–æ–≤</b>",
            reply_markup=await get_inline_buttons(btns=categories_buttons),
            parse_mode='HTML'
        )
    else:
        await callback.answer("<i>–°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –¥–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é</i>", parse_mode='HTML')


@admin.callback_query(F.data.startswith('items_'))
async def _(callback: CallbackQuery):
    data = callback.data.split('_')[-1]
    products = await get_products(data)
    await callback.answer()
    if products:
        result = '\n'.join(f'–ù–∞–∑–≤–∞–Ω–∏–µ: {product['name']}\n–û–ø–∏—Å–∞–Ω–∏–µ: {product['description']}\n–¶–µ–Ω–∞: {product['price']}' for product in products)
        await callback.message.answer(f"<b>–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤:</b> \n{result}", parse_mode='HTML')
    else:
        await callback.answer("<i>–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –¥–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ç–æ–≤–∞—Ä</i>", parse_mode='HTML')


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
@admin.callback_query(F.data == 'new product')
async def _(callback: CallbackQuery, state: FSMContext):
    categories = await get_categories()
    if categories:
        await callback.answer()
        categories_buttons = {category['name']: f'choose_category:{category['id']}' for category in categories}
        await state.set_state(AddProduct.category_id)
        await callback.message.edit_text("<b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä</b>",
                             reply_markup=await get_inline_buttons(btns=categories_buttons),
                             parse_mode='HTML'
                             )
    else:
        await callback.answer("–°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –¥–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é")


@admin.callback_query(AddProduct.category_id, F.data.startswith('choose_category:'))
async def _(callback: CallbackQuery, state: FSMContext):
    category_id = callback.data.split(':')[-1]
    await state.update_data(category_id=category_id)
    await callback.answer()
    await callback.message.edit_text("<i>–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞</i>", parse_mode='HTML')
    await state.set_state(AddProduct.name)


@admin.message(AddProduct.name)
async def _(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("<i>–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞</i>", parse_mode='HTML')
    await state.set_state(AddProduct.description)


@admin.message(AddProduct.description)
async def _(message: Message, state: FSMContext):
    await state.update_data(description=message.text)
    await message.answer("<i>–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ –≤ —Ä—É–±–ª—è—Ö</i>", parse_mode='HTML')
    await state.set_state(AddProduct.price)


@admin.message(AddProduct.price)
async def get_photo(message: Message, state: FSMContext):
    await state.update_data(price=message.text)
    await message.answer("<i>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Ç–æ–≤–∞—Ä–∞</i>", parse_mode='HTML')
    await state.set_state(AddProduct.photo)


@admin.message(AddProduct.photo, F.photo)
async def _(message: Message, state: FSMContext, bot: Bot):
    try:
        await message.answer("<i>–î–∞–Ω–Ω—ã–µ –ø—Ä–∏–Ω—è—Ç—ã, —Å–æ–∑–¥–∞—é —Ç–æ–≤–∞—Ä...</i> ‚è≥", parse_mode='HTML')

        file_id = message.photo[-1].file_id
        file_info = await bot.get_file(file_id)
        file_path = file_info.file_path
        downloaded_file = await bot.download_file(file_path)

        os.makedirs(FOLDER, exist_ok=True)
        photo_path = f'{FOLDER}/{message.photo[-1].file_unique_id}.jpg'
        with open(photo_path, 'wb') as f:
            f.write(downloaded_file.read())

        data = await state.get_data()
        name = data.get('name', 'N/A')
        des = data.get('description', 'N/A')
        price = data.get('price', 'N/A')
        cat_id = data.get("category_id", 'N/A')
        await create_product(name, des, int(price), int(cat_id), photo_path)
        answer = (
            f'–ë—ã–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω —Ç–æ–≤–∞—Ä "{name}"\n'
            f'–û–ø–∏—Å–∞–Ω–∏–µ: {des}\n'
            f'–¶–µ–Ω–∞: {price} RUB'
        )
        await bot.send_photo(chat_id=message.from_user.id, caption=answer, photo=FSInputFile(photo_path),
                             reply_markup=await get_inline_buttons(btns={'–ù–∞ –≥–ª–∞–≤–Ω—É—é': 'to main admin'}))
        await state.clear()
    except Exception as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ —Ö–æ–¥–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞.",
                             reply_markup=await get_inline_buttons(btns={'–ù–∞ –≥–ª–∞–≤–Ω—É—é': 'to main admin'}))
        await state.clear()
        raise e


@admin.message(AddProduct.photo)
async def _(message: Message, state: FSMContext):
    await message.answer("–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ")
    await get_photo(message, state)


# –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
@admin.callback_query(F.data == 'delete product')
async def _(callback: CallbackQuery, state: FSMContext):
    categories = await get_categories()
    if categories:
        await callback.answer()
        await state.set_state(DeleteProduct.category_id)
        categories_buttons = {category['name']: f'choose_category_{category['id']}' for category in categories}
        await callback.message.edit_text(
            "<b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞</b>",
            reply_markup=await get_inline_buttons(btns=categories_buttons),
            parse_mode='HTML'
        )
    else:
        await callback.answer("<i>–°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –¥–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é</i>", parse_mode='HTML')


@admin.callback_query(DeleteProduct.category_id, F.data.startswith('choose_category_'))
async def _(callback: CallbackQuery, state: FSMContext):
    category_id = callback.data.split('_')[-1]
    await state.update_data(category_id=int(category_id))
    products = await get_products(category_id)
    if products:
        products_buttons = {product['name']: f'delete_product_{product['id']}' for product in products}
        await callback.message.answer("<b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å</b>",
                             reply_markup=await get_inline_buttons(btns=products_buttons)
                             )
    else:
        await callback.answer("–°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –¥–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é")


@admin.callback_query(F.data.startswith('delete_product_'))
async def _(callback: CallbackQuery, state: FSMContext):
    product_id = callback.data.split('_')[-1]
    data = await state.get_data()
    category_id = data.get('category_id')
    product = await get_product(product_id)
    try:
        await delete_product(product_id, category_id)
        await callback.message.answer(f'<b>–¢–æ–≤–∞—Ä "{product['name']}" —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω</b>', parse_mode='HTML',
                                      reply_markup=await get_inline_buttons(btns={'–ù–∞ –≥–ª–∞–≤–Ω—É—é': 'to main admin'}))
    except Exception as e:
        await callback.message.answer("<i>–í —Ö–æ–¥–µ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É</i>",
                                      parse_mode='HTML',
                                      reply_markup=await get_inline_buttons(btns={'–ù–∞ –≥–ª–∞–≤–Ω—É—é': 'to main admin'}))
        raise e


